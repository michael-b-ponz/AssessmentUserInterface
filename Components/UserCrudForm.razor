<!-- Components/UserForm.razor -->
@inject Repositories.IUserRepository userRepository
@using Models

@if (IsFormVisible)
{
    <div class="card card-body" style="margin-top:5px; margin-bottom:5px; margin-left: 25%; margin-right: 25%; background-color:lightsteelblue">
        <h4>Add/Edit User</h4>
        <form @onsubmit="SaveUser">
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name:</label>
                <input id="firstName" @bind="UserBeingEdited.FirstName" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name:</label>
                <input id="lastName" @bind="UserBeingEdited.LastName" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email Address:</label>
                <input id="email" @bind="UserBeingEdited.EmailAddress" class="form-control" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </form>
    </div>

}


@code {
    [Parameter]
    public User UserBeingEdited { get; set; } = new User(); // Parameter for the user being edited

    [Parameter]
    public EventCallback<User> OnSave { get; set; }

    [Parameter]
    public bool IsFormVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsFormVisibleChanged { get; set; }

    // Method to handle form submission and add/edit user
    private async Task SaveUser()
    {
        if (UserBeingEdited.Id == 0)
        {
            // Add new user
            UserBeingEdited.DateCreated = DateTime.Now;
            UserBeingEdited.DateUpdated = DateTime.Now;
            userRepository.AddUser(UserBeingEdited);
        }
        else
        {
            // Edit existing user
            userRepository.UpdateUser(UserBeingEdited);
        }

        // Clear the form after adding/editing
        UserBeingEdited = new User();

        // Invoke the event callback to notify the parent component
        await OnSave.InvokeAsync(UserBeingEdited);
    }
}
