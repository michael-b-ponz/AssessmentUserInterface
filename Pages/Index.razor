@page "/"
@inject ApplicationDbContext dbContext
@inject AssessmentUserInterface.Controllers.UserController userController
@using Models
@using AssessmentUserInterface.Components

<h3>Users</h3>

<button @onclick="ToggleForm" class="btn btn-primary" type="button">
    Add/Edit User
</button>

<UserCrudForm IsFormVisible="@isFormVisible" IsFormVisibleChanged="HandleFormVisibilityChange" OnSave="HandleSaveUser" UserBeingEdited="newUser" />

<table class="table" style="margin-top:5px; margin-right: 5%;">
    <thead style="background-color:lightgray">
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email Address</th>
            <th>Date Created</th>
            <th>Date Updated</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in dbContext.Users)
        {
            <tr style="background-color:ghostwhite">
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.EmailAddress</td>
                <td>@user.DateCreated</td>
                <td>@user.DateUpdated</td>
                <td>
                    <button @onclick="() => EditUser(user)">Edit</button>
                    <button @onclick="() => DeleteUser(user.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<User> users = new List<User>();
    private User newUser = new User();
    private bool isFormVisible = false;

    protected override void OnInitialized()
    {
        users = userController.GetAllUsers().ToList();
    }

    // Event handler to handle the save operation from the UserForm component
    private void HandleSaveUser(User savedUser)
    {
        // Update the list of users
        if (!users.Contains(savedUser))
        {
            users.Add(savedUser);
        }
        else
        {
            // User was edited, update the user in the list
            var existingUser = users.Find(u => u.Id == savedUser.Id);
            if (existingUser != null)
            {
                // Update other properties if needed
                existingUser.FirstName = savedUser.FirstName;
                existingUser.LastName = savedUser.LastName;
                existingUser.EmailAddress = savedUser.EmailAddress;
                existingUser.DateCreated = savedUser.DateCreated;
                existingUser.DateUpdated = DateTime.Now + TimeSpan.FromDays(1 * existingUser.Id);
            }
        }
        newUser = new User();
    }

    // Method to handle editing a user
    private void EditUser(User user)
    {
        newUser = user;
    }

    // Method to handle deleting a user
    private void DeleteUser(int userId)
    {
        userController.DeleteUser(userId);
        // Remove the deleted user from the list
        users.RemoveAll(u => u.Id == userId);
    }

    public void ToggleForm()
    {
        isFormVisible = !isFormVisible;
    }

    public void HandleFormVisibilityChange(bool isVisible)
    {
        isFormVisible = isVisible;
    }
}
